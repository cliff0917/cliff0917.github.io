<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>軟體設計原則</title>
      <link href="/post/%E8%BB%9F%E9%AB%94%E8%A8%AD%E8%A8%88%E5%8E%9F%E5%89%87/"/>
      <url>/post/%E8%BB%9F%E9%AB%94%E8%A8%AD%E8%A8%88%E5%8E%9F%E5%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>軟體也像人一樣，具有生命力，從出生到死亡，會經歷多種變化。軟體架構設計並非一蹴可幾的，而是不斷地發展演進。</p><p><strong>軟體設計原則是一組幫助我們避開不良設計的指導方針</strong>。根據 <code>Robert Martin</code> 的理論，不良的設計主要有以下三個特點：</p><ul><li><p><strong>僵硬性（Rigidity）</strong>：指系統難以修改、擴展或適應變化。e.g. 每一個細微的改動都會影響到系統的其他功能</p></li><li><p><strong>脆弱性（Fragility）</strong>：指系統容易出現意外的錯誤或異常，這可能會導致系統崩潰或無法正常運行。e.g. 每做一次改動，總會引起系統預期之外的故障</p></li><li><p><strong>不可移植性（Immobility）</strong>：指系統難以移植到其他平台或環境中。e.g. 有些系統依賴特定的技術或平台，導致要移植到其他平台時，程式碼不能重用（Resue），而是必須整個重寫（Rewrite）</p></li></ul><p><strong>下面列舉的軟體設計原則主要是從網路、書籍中整理而來的，並不完整。此外，有時我們必須在一些「有衝突的原則」之間做出權衡和取捨。</strong></p><h1 id="二、通用設計原則"><a href="#二、通用設計原則" class="headerlink" title="二、通用設計原則"></a>二、通用設計原則</h1><h2 id="1-KISS"><a href="#1-KISS" class="headerlink" title="1. KISS"></a>1. KISS</h2><p>即 <code>Keep It Simple, Stupid</code>。<strong>指設計時應堅持「簡約」原則，避免不必要的複雜化，使之易於修改。</strong></p><p>簡單清晰、功能強大是軟體設計最重要的原則和目標。但是軟體工程本身錯綜複雜，而且「簡單」並沒有一個衡量標準。一般來說，軟體工程主要是透過以下幾種方式判斷一個設計是否簡單：</p><ul><li>讓其他軟體工程師能以一種最容易的方式使用</li><li>當系統變得更龐大、複雜時，其邏輯依然能夠被理解</li><li>如果系統無法保持簡單，那麼我們能做的就是保持各個局部的簡單，也就是單個的 class、module、application 的設計目標、工作原理都能被迅速理解</li></ul><blockquote><p><strong>個人理解</strong>：保持簡單，但不能掩蓋軟體本身豐富的內涵，即「<strong>簡約但不簡單</strong>」！簡約是指對複雜的事物抽絲剝繭、去除細枝末節，顯露其主要邏輯的過程。e.g. 寫文章時，盡可能用樸實的語言，言簡意賅地表達想法，但卻又要避免語言過於貧乏。</p><p>軟體的「抽象」和「直觀」，其實是一對矛盾的關係，而軟體設計的目標就是要保證這兩者之間的平衡。</p><ul><li>過於「抽象」會陷入「過度設計」的困境，導致系統過於複雜、不易理解</li><li>過於「直觀」而缺乏抽象，會使系統含有大量的重複，導致其不易擴展、維護</li></ul></blockquote><h2 id="2-DRY"><a href="#2-DRY" class="headerlink" title="2. DRY"></a>2. DRY</h2><p>即 <code>Don&#39;t Repeat Yourself</code>。<strong>指設計時應避免重複程式碼。</strong></p><p><strong>「重複程式碼是讓軟體變爛的萬惡之首」</strong>。<code>DRY</code> 並不是指你不能複製程式碼，而是你複製的<strong>程式碼中不能包含重複的「訊息」</strong>。</p><p>程式碼之所以要寫的好，不要重複某些「訊息」，<strong>是因為需求人員總是更改需求</strong>。為了減少修改程式碼的痛苦，我們不能重複任何訊息。e.g. 有一天需求人員說，要把分隔符號從分號改成頓號，如果相關的程式碼散佈在各個地方，那就會需要改很多地方。</p><p><strong>「重複程式碼」的常見形式：</strong></p><ul><li>魔術數字（Magic Number）：指缺乏解釋或命名的獨特數值，通常指寫死在程式碼裡的具體數值（也可指非數字的值，例如字元、字串）。e.g. <code>price_tax = 1.05 * price</code> 中的 <code>1.05</code></li><li>相同的程式碼區塊</li><li>相似的程式碼邏輯及操作</li></ul><blockquote><p><strong>個人理解</strong>：解決重複的最佳方式就是培養良好的 coding 習慣來避免重複，並透過重構（Refactor）的手段來消除重複。</p><p>發現和解決重複並不困難，透過提取 abstract、method 等方法就能消除重複，但困難的是「<strong>立即行動</strong>」去解決重複，並從中不斷地磨礪和提升自己的技巧。</p><p>解決了重複，經過一段時間後，你就會發現自己對整個系統的理解在不知不覺中提高了不少。</p></blockquote><h2 id="3-Maximize-Cohesion-Minimize-Coupling"><a href="#3-Maximize-Cohesion-Minimize-Coupling" class="headerlink" title="3. Maximize Cohesion, Minimize Coupling"></a>3. Maximize Cohesion, Minimize Coupling</h2><p>即「<strong>高內聚、低耦合</strong>」。這是判斷設計好壞的標準，主要是看 module 內的內聚性是否足夠高，module 間的耦合性是否足夠低。</p><ul><li><p><strong>內聚性（Cohesion）</strong>：指一個 module 內部各元素之間相互依賴的程度，一個 module 內的元素應該相互關聯，共同完成一個特定的任務或目標<br>➔ 高內聚的 module 通常易於理解、測試和修改，因為相關的元素都在一起，有利於維護和重用</p></li><li><p><strong>耦合性（Coupling）</strong>：指 module 之間相互依賴的程度。耦合性越高，module 之間的相互影響就越大，這會使得系統更加脆弱、難以測試、修改和擴展。因此，降低耦合性是軟體設計中的一個重要目標</p></li></ul><p><strong>實現「高內聚、低耦合」的常用方式：</strong></p><ul><li>少用 class 的繼承，多用 API 來隱藏實作的細節</li><li>module 的功能盡可能的單一，因為功能單一的 module 提供其它 module 調用的機會較少</li><li>遵循一個定義只在一個地方出現</li><li>少使用全局變數</li><li>class 中的 attribute 和 method 盡量宣告成 <code>private</code>，少使用 <code>public</code></li><li>多使用 Design Pattern，比如 <code>MVC</code> 的設計模式可降低介面（Interface）、業務邏輯（Business Logic）之間的耦合度</li><li>避免直接操作或調用其它 module</li></ul><h2 id="4-SOC"><a href="#4-SOC" class="headerlink" title="4. SOC"></a>4. SOC</h2><p>即 <code>Separation of Concerns</code>（關注點分離）。<strong>指將複雜的系統分解為不同的獨立 module，每個 module 都應該專注於一個特定的功能或關注點（Concern）</strong>。這樣可以降低系統的複雜性，提高程式碼的可讀性、可維護性和可重用性。</p><p><code>MVC</code> 就是關注點分離的一個體現，其目的是將應用程式的表示層、業務邏輯層分離，使得不同的部分可以獨立地進行修改、測試，同時降低它們之間的耦合性。以下是 <code>MVC</code> 的基本架構：</p><ul><li><code>Model</code> 負責和「業務邏輯」有關的功能，通常負責和資料庫溝通</li><li><code>View</code> 負責畫面的呈現，通常是根據 <code>Model</code> 提取的資料來呈現</li><li><code>Controller</code> 負責使用者的互動邏輯，並向 <code>Model</code> 傳送資料</li></ul><p><img src="https://i.imgur.com/kRfDmNL.png"></p><p><code>MVC</code> 設計中，各個關注點是分開的，這樣有助於我們管理和開發複雜的應用程式，我們可以在某個時間點只集中精力在其中的某一個關注點，而不是所有的部分。</p><blockquote><p>好的架構必須使每個關注點相互分離，也就是說系統中的一個部分發生了變化，不會影響到其他部分。即使需要改變，也能夠清晰地識別出哪些部分需要改變。如果需要擴展架構，影響將會最小化。</p></blockquote><p><strong>常見的分離方式：</strong></p><ul><li><p><strong>分層架構（Layered Architecture）</strong>：將應用程式分為多個層級，每一層負責不同的功能。一般來說，分層架構包括：</p><ul><li>表示層（Presentation Layer）</li><li>業務邏輯層（Business Logic Layer）</li><li>資源訪問層（Resource Access Layer）</li></ul></li><li><p><strong>水平分離（Horizontal Separation）</strong>：指將系統中的不同功能的 module 分離到不同的節點中。e.g. 將一個大型的應用程式分離成多個微服務（Microservices），每個微服務運行在不同的服務器或容器中，以實現系統的橫向擴展性和容錯性</p><p>  <img src="https://i.imgur.com/yQZ2C5z.png"></p></li><li><p><strong>垂直分離（Vertical Separation）</strong>：將不同層級的功能分離開來，讓每一層只負責特定的任務和責任。每一層都可以被視為一個獨立的單元，並且不直接與其他層進行互動，而是通過明確定義的 API 進行溝通。e.g. <code>MVC</code> 架構</p><p>  <img src="https://i.imgur.com/lQo8OIx.png"></p></li><li><p><strong>切面分離（Aspect Separation）</strong>：有些功能是多層之間都需要的，e.g. 日誌、安全性、事務管理等，因此可以把這類跨多層的業務從業務邏輯中分離出來，並將其封裝成可重用的 module</p><p>  <img src="https://i.imgur.com/KkDGPK2.png"></p></li><li><p><strong>服務分離（Service Separation）</strong>：系統中的每個 module 或組件都被視為一個獨立的服務，它們之間通過定義清晰的 API 和協議進行通訊和協作。每個服務都專注於實現一個特定的功能，並提供對外的 API，以便其他服務可以使用它的功能，從而實現系統的整體目標。</p></li></ul><h2 id="5-YAGNI"><a href="#5-YAGNI" class="headerlink" title="5. YAGNI"></a>5. YAGNI</h2><p>即 <code>You Ain’t Gonna Need It</code>（你不需要它）。指在開發軟體時，<strong>不要去實現目前不需要的功能，以避免浪費時間和資源</strong>。</p><p><code>YAGNI</code> 和 <code>KISS</code> 有點類似，它們都致力於構建精簡的設計。差別在於：</p><ul><li><code>KISS</code> 是透過盡可能簡單地完成某件事情來實現精簡的設計</li><li><code>YAGNI</code> 是透過根本就不實現它來達到精簡的設計</li></ul><p><code>YAGNI</code> 的理念是建議我們不要去「過度設計」，而是在實際需要的時候再去實作。因為在開發軟體的過程中，<strong>需求和情況經常會改變</strong>，先前所加入的多餘程式碼和功能可能會變成負擔，讓軟體變得更加複雜、難以維護。</p><blockquote><p><strong>個人理解</strong>：</p><ul><li><p><code>YAGNI</code> 是在告誡我們「<strong>寫程式不要畫蛇添足，否則很容易弄巧成拙</strong>」。撰寫程式碼時，不要去假想一些需求或者場景，因為絕大多數我們所設想的場景都不會發生，但我們所多寫的那些程式碼卻會長期滯留在系統中，這不僅會讓自己和團隊花費更多的時間、精力去理解和維護，更可能會讓將來的維護者感到困惑</p></li><li><p>沒有被使用到的程式碼，應立即刪除，從而保持系統的精簡</p></li></ul></blockquote><h2 id="6-Boy-Scout-Rule"><a href="#6-Boy-Scout-Rule" class="headerlink" title="6. Boy-Scout Rule"></a>6. Boy-Scout Rule</h2><p>即 <code>童子軍規則</code>。美國童子軍有一條規則：「讓營地比你剛來時更乾淨」。如果看到地上有垃圾，不管是誰扔的，都要清理乾淨，為下一批來的人創造一個好的環境。</p><p><code>Boy-Scout Rule</code> 指在對現有程式碼進行更改時，程式碼的品質往往會降低，從而累積技術債。所以需要<strong>始終保持程式碼的整潔</strong>。</p><p>不管原作者是誰，只要我們努力去改進程式碼，哪怕是多麼小的改進，都能讓系統不會持續變壞。這讓系統在發展的同時會逐漸變得更好，也會看到團隊成員們關心整體的系統，而不是只關心各自負責的部分。</p><p><code>Boy-Scout Rule</code> 告訴我們團隊成員應互助合作，互相清理程式碼。這不僅是為了自己好，更是為了團隊好。</p><p><code>Boy-Scout Rule</code> 所提倡的<strong>對程式碼的壞味道（Bad Smell）要儘早修復</strong>，這個概念其實就是我們耳熟能詳的「<strong>破窗效應（Broken Window Effect）</strong>」</p><p><strong>破窗效應</strong></p><blockquote><p>如果有人打壞了某棟建築物的窗戶，而這扇窗戶又得不到及時的修復，其他人就會感覺到這個社區不受監管，進而做出破壞、污染等不良行為，從而滋生出更多的犯罪活動</p></blockquote><ul><li>環境早就髒了，我扔的這點垃圾根本起不到什麼關鍵性作用</li><li>之前的人也都是這樣寫的</li><li>反正也不是只有我是這樣寫的</li></ul><p>不少人會像上面這樣辯解自己的過錯。其實，這些說法根本站不住腳，錯了就是錯了，影響的大小並不會改變行為錯誤的本質，別人的錯誤更不會是證明自己沒錯的理由。任何一種不良現象的存在，都有可能傳遞一種錯誤的訊息，進而導致更糟的後果，正所謂「<strong>勿以善小而不為，勿以惡小而為之</strong>」。</p><h2 id="其他原則"><a href="#其他原則" class="headerlink" title="其他原則"></a>其他原則</h2><ul><li><p><strong>避免過早優化（<code>Avoid Premature Optimization</code>）</strong>：「<strong>過早的優化是萬惡之源</strong>」，在程式碼開發的早期階段就花費過多的時間和資源進行優化，這種優化很可能是非必要的，因為尚未發現實際的效能問題。這種行為可能會浪費開發人員的時間和資源，也可能會降低程式碼的可讀性、可維護性。</p></li><li><p><strong>最小驚訝原則（<code>Principle of least astonishment</code>）</strong>：軟體應符合使用者的直覺和期望，而不是讓使用者感到驚訝或困惑。也就是說，你撰寫的程式碼只需按照需求來撰寫即可，其他華麗的功能就不必了，以免弄巧成拙。</p></li><li><p><strong>程式碼重用原則（<code>Code Reuse is Good</code>）</strong>：重用程式碼能提高可讀性，並縮短開發時間。</p></li><li><p><strong>別讓我思考（<code>Don’t Make Me Think</code>）</strong>：程式碼一定要易讀、易理解，這樣別人才會欣賞，也才能夠給你提出合理的建議。複雜的程式碼，其他人是會避而遠之的。</p></li><li><p><strong>為維護者寫程式碼（<code>Write Code for the Maintainer</code>）</strong>：優秀的程式碼，應使本人或是他人在將來都能夠對它進行修改或維護。程式碼維護時，通常本人會比較容易，但對他人來說卻會比較麻煩。因此，撰寫程式碼時要盡可能地保證他人能夠容易維護。</p></li><li><p><strong>正交原則（<code>Orthogonality Principle</code>）</strong>：module 之間應盡可能地相互獨立，一個 module 的改變不應該影響到其他的 module。</p></li><li><p><strong>做最簡單的事就讓程式碼可運行（<code>Do the simplest thing that could possibly work</code>）</strong>：盡可能做最簡單的事就可以讓程式碼成功運行。</p></li><li><p><strong>隱藏實作細節（<code>Hide Implementation Details</code>）</strong>：透過提供 API 來隱藏實作細節，避免洩漏任何不必要的訊息。</p></li><li><p><strong>莫非定律（<code>Murphy&#39;s Law</code>）</strong>：如果事情有變壞的可能，不管這種可能性有多小，它總會發生。主要內容如下：</p><ul><li>任何事都沒有表面看起來那麼簡單</li><li>會出錯的事總會出錯</li><li>如果你擔心某種情況發生，那麼它就更有可能發生</li></ul></li></ul><h1 id="三、物件導向設計原則-SOLID"><a href="#三、物件導向設計原則-SOLID" class="headerlink" title="三、物件導向設計原則 - SOLID"></a>三、物件導向設計原則 - SOLID</h1><h2 id="1-SRP"><a href="#1-SRP" class="headerlink" title="1. SRP"></a>1. SRP</h2><p>即 <code>Single Responsibility Principle</code>（單一職責原則）。<strong>指每個 class 都應該有一個單一的功能，且該功能應由這個 class 封裝起來。</strong></p><p>如果一個 class 承擔的職責過多，就等於把這些職責耦合在一起了。一個職責的變化可能會削弱或抑制這個 class 完成其他職責的能力。這種耦合會導致脆弱的設計，當發生變化時，很容易會受到意想不到的破壞。</p><p><strong>此原則的核心就是解耦（Decoupling）和增強內聚性。</strong></p><h3 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h3><ul><li>class 的複雜性降低，實作什麼職責都有明確的定義</li><li>降低複雜性，並提高可讀性、可維護性</li><li>降低因變更引起的風險</li></ul><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li><code>SRP</code> 最難劃分的就是職責</li><li><code>SRP</code> 制定標準，用職責和變化來衡量 API 的設計好壞與否</li><li>API 一定要做到 <code>SRP</code>，class 的設計盡量做到只有一個原因會引起它變化</li></ul><h2 id="2-OCP"><a href="#2-OCP" class="headerlink" title="2. OCP"></a>2. OCP</h2><p>即 <code>Open Closed Principle</code>（開閉原則）。指「<strong>對擴充開放，對修改封閉</strong>」。</p><p><strong>指軟體設計應具有可擴展性，以應對未來的需求變化，同時又要保持對現有程式碼的穩定性和保護。</strong></p><h3 id="好處-1"><a href="#好處-1" class="headerlink" title="好處"></a>好處</h3><ul><li>可重用性高，通過設計可重用的 module 來提高重用性。重用已經存在的 module 可以簡化程式碼，並提高開發效率</li><li>可維護性高，因為在擴展時不需要修改現有程式碼，這樣可以降低出錯的風險</li><li>可擴展性高，因為已經被設計成可以在不修改現有程式碼的情況下添加新功能</li><li>可測試性高，因為已經被設計成可以進行獨立測試的 module</li></ul><h2 id="3-LSP"><a href="#3-LSP" class="headerlink" title="3. LSP"></a>3. LSP</h2><p>即 <code>Liskov Substitution Principle</code>（里氏替換原則）。指「<strong>子類別（Derived Class）可以擴展父類別（Base Class）的功能，但不能改變父類別原有的功能</strong>」。</p><p><strong><code>LSP</code> 的目的是保證子類別可以完全替代父類別，而不會對系統的正確性產生任何負面影響</strong>。如果一個類別不能替代它的父類別，就可能會導致程式錯誤或產生不可預測的行為。</p><h3 id="好處-2"><a href="#好處-2" class="headerlink" title="好處"></a>好處</h3><ul><li>可重用性高，因為子類別可以替代父類別，所以不需要對程式碼進行大規模的修改</li><li>可維護性高，這樣的設計使程式碼更具可讀性</li></ul><h2 id="4-ISP"><a href="#4-ISP" class="headerlink" title="4. ISP"></a>4. ISP</h2><p>即 <code>Interface Segregation Principle</code>（介面隔離原則）。<strong>指使用者不應該實作他們不需要的 interface</strong>。此原則的核心是「<strong>促進軟體系統的可維護性、可擴展性和可讀性</strong>」。</p><p>「<strong>interface 盡量細化，且 interface 中的方法盡量少</strong>」。</p><h3 id="注意事項-1"><a href="#注意事項-1" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li><p>對 interface 進行細化可以提高程式的靈活度，但是如果過小，則會造成 interface 數量過多，導致設計複雜化。所以一定要適度</p></li><li><p>為依賴該 interface 的 module 提供客製化的服務，只暴露給調用的 module 它所需要的方法，並隱藏一切它不需要的方法，這樣才能建立最小的依賴關係</p></li><li><p>提高內聚，減少耦合。使 interface 用最少的方法去完成最多的事</p></li></ul><h2 id="5-DIP"><a href="#5-DIP" class="headerlink" title="5. DIP"></a>5. DIP</h2><p>即 <code>Dependency Inversion Principle</code>（依賴反轉原則）。<strong>指高層 module 不應該依賴低層 module，兩者都應依賴其抽象。</strong></p><p>高層、低層是相對關係，其中細節指的是具體的實作，相較於抽象的穩定，細節的變化較多。</p><p>「<strong>抽象不應該依賴細節，細節應該依賴於抽象」，因為「相對於細節的多變性，抽象的東西要穩定的多</strong>」。</p><p>e.g. 到賣場消費要付款時，使用信用卡付款的設計如下圖（箭頭左側的設計）。其中，信用卡是低層次的 module，而付款這個行為是高層次的 module。我們可以發現付款這個行為跟信用卡有直接的關係。</p><ul><li><p>隨著時代的進步，會有更多的付款方式出現。但是，如果照著上面的方式去設計系統的話，每當出現一個新的付款方式，就要去更動一次程式，這並非理想的設計</p></li><li><p>因此，我們可以將付款行為抽出成 interface。抽出一個 <code>IPayment</code> 作為 interface，讓付款方式 <code>CreditCard</code> 和 <code>QRCode</code> 去實作 <code>IPayment</code>，而 <code>Payment</code> 只要負責導入 <code>IPayment</code> 即可（箭頭右側的設計）</p></li><li><p>假設未來要新增虛擬貨幣的付款方式，只需要新增一個 <code>BlockChain</code> 的 class 即可，不需要動到 <code>Payment</code> 本身</p></li><li><p>可以將 <code>CreditCard</code>、<code>QRCode</code> 看成付款的細節（變化度高），這兩個付款方式應該依照抽象類別 <code>IPayment</code> 去實作（穩定度高），而不是讓 <code>IPayment</code> 去迎合 <code>CreditCard</code> 或 <code>QRCode</code></p></li></ul><p><img src="https://i.imgur.com/EYFPkh9.png"></p><h3 id="好處-3"><a href="#好處-3" class="headerlink" title="好處"></a>好處</h3><ul><li>透過抽象實現低耦合的系統設計，提高程式碼的可讀性、可重用性</li><li>提高程式碼的可測試性，減少其修改和維護的成本</li></ul>]]></content>
      
      
      <categories>
          
          <category> 軟體設計 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 設計原則 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 建立網域</title>
      <link href="/post/Linux-%E5%BB%BA%E7%AB%8B%E7%B6%B2%E5%9F%9F/"/>
      <url>/post/Linux-%E5%BB%BA%E7%AB%8B%E7%B6%B2%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<div class="note orange icon-padding modern"><i class="note-icon fas fa-circle-exclamation"></i><p>2023 年 3 月，Meta 指控 Freenom 存在域名搶註和商標侵權行為，因為有不少詐騙集團利用 Freenom 註冊含有 FB、INS、Whatsapp 之類字樣的域名，並將其用於釣魚網站，藉此來迷惑用戶。基於上述原因，Freenom 暫時宣布「停止新域名的註冊」，故本篇註冊域名的方法暫時無法使用，請改用 <a href="https://www.noip.com/">No-ip</a> 或 <a href="https://www.namecheap.com/">Namecheap</a> 等方式來申請域名。此外，本篇其他部分的方法還是適用的。</p></div><h1 id="一、先到-Freenom-註冊域名"><a href="#一、先到-Freenom-註冊域名" class="headerlink" title="一、先到 Freenom 註冊域名"></a>一、先到 <a href="https://www.freenom.com/zu/index.html?lang=zu">Freenom</a> 註冊域名</h1><ul><li><p>先用 <a href="https://free.com.tw/tunnelbear-free-vpn/">VPN</a> 連到美國來<a href="https://zhuanlan.zhihu.com/p/115535965">註冊帳號</a>，注意 : 購買域名時也需用 VPN 連到美國</p></li><li><p>申請域名，搜尋時，域名的後綴也要輸入，比如說 <code>.tk 或 .ml</code> 等等<br>（可以先輸入 <code>uscc-test</code> 來看有哪些後綴）</p><p>  <img src="https://i.imgur.com/xSn9KYb.png"></p></li><li><p>選擇 Checkout</p><p>  <img src="https://i.imgur.com/boUpyOV.png"></p></li><li><p>選擇 12 個月的方案（免費的）</p><p>  <img src="https://i.imgur.com/ugipFRM.png"></p></li><li><p><strong>先開 VPN 連到美國</strong>，再按下 Complete Order</p><p>  <img src="https://i.imgur.com/l67hpf3.png"></p></li><li><p>購買成功</p><p>  <img src="https://i.imgur.com/Z5Y6g5S.png"></p></li><li><p>確認是否有新增到 My Domains</p><p>  <img src="https://i.imgur.com/4iBTzuZ.png"></p></li></ul><h1 id="二、利用-CloudFlare-進行-DNS-託管"><a href="#二、利用-CloudFlare-進行-DNS-託管" class="headerlink" title="二、利用 CloudFlare 進行 DNS 託管"></a>二、利用 <a href="https://www.cloudflare.com/zh-tw/">CloudFlare</a> 進行 DNS 託管</h1><ul><li><p>點選 Add a site 來新增網站，輸入剛申請的域名</p><p>  <img src="https://i.imgur.com/t9bYBjt.png"></p><p>  <img src="https://i.imgur.com/SPqK6QO.png"></p></li><li><p>選擇 0 元的免費方案</p><p>  <img src="https://i.imgur.com/FPb24zO.png"></p></li><li><p>新增一筆 A record，其中 Name 欄位輸入申請的域名、Content 欄位輸入要導向的 ip address</p><p>  <img src="https://i.imgur.com/JvypMFV.png"></p></li><li><p>複製 CloudFlare 給的 Nameserver 到 freenom 中</p><p>  <img src="https://i.imgur.com/TgUepxw.png"></p><p>  <img src="https://i.imgur.com/wWC420W.png"></p><p>  <img src="https://i.imgur.com/t6Bv2NH.png"></p><p>  <img src="https://i.imgur.com/CjW3vOE.png"></p></li><li><p>用 <a href="https://dnschecker.org/">DNS Checker</a> 確認是否成功託管，這樣就能將域名 <code>uscc-test.tk</code> 轉換成 ip address <code>140.116.82.34</code></p><p>  <img src="https://i.imgur.com/IIcKl8q.png"></p></li><li><p>開啟 SSL&#x2F;TLS Recommender</p><p>  <img src="https://i.imgur.com/nL9xXMG.png"></p></li><li><p>開啟 Always Use HTTPS</p><p>  <img src="https://i.imgur.com/p4sMI6w.png"></p></li></ul><h1 id="三、設定-Port-Forwarding"><a href="#三、設定-Port-Forwarding" class="headerlink" title="三、設定 Port Forwarding"></a>三、設定 Port Forwarding</h1><ul><li><p>目的：讓 request 能透過 <code>uscc-test.tk</code> （140.116.82.34:80） 導向指定的 port（web sever 所使用的 port，e.g. <code>140.116.82.34:8080</code>）。如此一來，當你的 server 收到來自 port 80 (http) 的 request 時，才知道要將 request 導向何處（e.g. port 8080）</p></li><li><p>安裝 nginx</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx -y</span><br></pre></td></tr></table></figure></li><li><p>輸入 <code>sudo vim /etc/nginx/sites-available/uscc-test.conf</code>  （改成你的域名），並貼上以下內容（改成你的域名、ip address、port）</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name uscc-test.tk; <span class="comment"># 更改此處</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://140.116.82.34:8080; <span class="comment"># 更改此處</span></span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>建立 soft link <code>/etc/nginx/sites-enabled/</code>（改成你的域名）</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /etc/nginx/sites-available/uscc-test.conf /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></li><li><p>這樣就完成 http 導向指定 port 的部分了，下面介紹 https 的部分</p></li></ul><h1 id="四、利用-cerbot-來獲得-https-憑證"><a href="#四、利用-cerbot-來獲得-https-憑證" class="headerlink" title="四、利用 cerbot 來獲得 https 憑證"></a>四、利用 cerbot 來獲得 https 憑證</h1><ul><li><p>目的：將連線加密，否則輸入網址後會出現下圖警告</p><p><img src="https://i.imgur.com/ttAhVRo.png"></p></li><li><p>安裝 cerbot</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install certbot python3-certbot-nginx -y</span><br></pre></td></tr></table></figure></li><li><p>輸入 <code>sudo certbot --nginx</code> 為指定網站新增 https 憑證</p><p>  <img src="https://i.imgur.com/Wd95HVU.png"></p></li><li><p><strong>將 http 的 request 自動導向到 https 的 port。這樣一來，即便在瀏覽器上輸入 <code>http://uscc-test.tk/</code>，也會自動導向到 <code>https://uscc-test.tk/</code></strong></p><p>  <img src="https://i.imgur.com/4LKmNUS.png"></p></li><li><p>再次輸入 <code>sudo vim /etc/nginx/sites-available/uscc-test.conf</code> ，就會發現 cerbot 自動新增了從 port 80 (http) 導向到 port 443 (https) 的部分（下圖紅框部分）</p><p>  <img src="https://i.imgur.com/V4PUUUu.png"></p></li><li><p>注意：server 的防火牆要允許 port 80、443 的連線（以及 web server 的 port，e.g. 8080）</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw allow 80</span><br><span class="line">sudo ufw allow 443</span><br></pre></td></tr></table></figure></li><li><p>輸入 <code>sudo nginx -t</code> 確認剛新增的 <code>uscc-test.conf</code> 格式是否 ok</p><p>  <img src="https://i.imgur.com/5B4J8RF.png"></p></li><li><p>如果上一步 ok，則重新啟動 nginx</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure></li><li><p>在瀏覽器上輸入 <code>uscc-test.tk</code> 即可存取愛美膚網站</p><p>  <img src="https://i.imgur.com/nzTny3U.png"></p></li><li><p>輸入 <code>sudo certbot certificates</code> 可知道目前憑證的剩餘有效天數（每申請一次能用 90 天）</p><p>  <img src="https://i.imgur.com/SyeK7Qa.png"></p></li></ul><h1 id="五、利用-crontab-定時更新-https-憑證"><a href="#五、利用-crontab-定時更新-https-憑證" class="headerlink" title="五、利用 crontab 定時更新 https 憑證"></a>五、利用 crontab 定時更新 https 憑證</h1><ul><li>輸入 <code>sudo crontab -e</code> 或是 <code>crontab -u 你的使用者名稱 -e</code></li><li>並在最下面新增 <code>@daily /usr/bin/certbot renew --quiet</code>，這樣系統會在<strong>每天的 00:00</strong> 嘗試更新憑證</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 安裝 Opencv Cuda</title>
      <link href="/post/Ubuntu-%E5%AE%89%E8%A3%9D-Opencv-Cuda/"/>
      <url>/post/Ubuntu-%E5%AE%89%E8%A3%9D-Opencv-Cuda/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安裝環境"><a href="#一、安裝環境" class="headerlink" title="一、安裝環境"></a>一、安裝環境</h1><ul><li>Ubuntu 20.04 64bit</li><li>NVIDIA GTX 1060、RTX 3090</li><li>Anaconda with python 3.7</li><li>Opencv 4.5.3</li><li>Cuda 11.2</li></ul><h1 id="二、注意事項"><a href="#二、注意事項" class="headerlink" title="二、注意事項"></a>二、注意事項</h1><ul><li><p>請先<a href="https://developer.nvidia.com/cuda-gpus">查看自身顯卡算力</a>，若顯卡算力超過 7.5（例如 RTX 3090 算力是 8.6），則 cuda 一定要裝 11.0 以上。至於如何安裝指定版本的 cuda 可參考<a href="https://mikethreeacer.medium.com/ubuntu-18-04-%E5%AE%89%E8%A3%9D-cuda-cudnn-anaconda-pytorch-1f170b3326a4">這篇</a></p></li><li><p>本篇的作法是在某個虛擬環境上安裝 opencv cuda。假設我是在 <code>liu</code> 這個虛擬環境上安裝 opencv cuda，則不會影響到其他虛擬環境的 opencv</p></li></ul><h1 id="三、安裝-NVIDIA-GPU-Driver"><a href="#三、安裝-NVIDIA-GPU-Driver" class="headerlink" title="三、安裝 NVIDIA GPU Driver"></a>三、安裝 NVIDIA GPU Driver</h1><ul><li><p>請用下面的指令安裝（讓系統自己找符合的 driver 版本）<br>不建議使用 <code>sudo apt install nvidia-driver-xxx</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ubuntu-drivers-common</span><br><span class="line">sudo ubuntu-drivers autoinstall</span><br><span class="line">sudo apt install nvidia-cuda-toolkit</span><br></pre></td></tr></table></figure></li><li><p>安裝完記得重開機，並用 <code>nvidia-smi</code> 測試 driver 是否安裝完成</p><p>  <img src="https://i.imgur.com/mTDscC1.png"></p></li><li><p>用 <code>nvcc -V</code> 查看 cuda 版本（預設是裝 10.1, 這邊 11.2 是我額外裝的）<br>  <img src="https://i.imgur.com/3m1izuU.png"></p></li></ul><h1 id="四、gcc-和-g-降版本"><a href="#四、gcc-和-g-降版本" class="headerlink" title="四、gcc 和 g++ 降版本"></a>四、gcc 和 g++ 降版本</h1><ul><li><p>gcc、g++ 安裝時預設為最新版 9.X，但版本太新後面編譯 opencv 時會有 error, 故將版本降到 7.5.0</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y gcc g++</span><br><span class="line">sudo apt-get install -y gcc-7 g++-7</span><br><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line">sudo <span class="built_in">rm</span> gcc</span><br><span class="line">sudo <span class="built_in">ln</span> -s gcc-7 gcc</span><br><span class="line">sudo <span class="built_in">rm</span> g++</span><br><span class="line">sudo <span class="built_in">ln</span> -s g++-7 g++</span><br></pre></td></tr></table></figure></li><li><p>用 <code>gcc -v</code> 和 <code>g++ -v</code> 查看版本是否正確</p><p>  <img src="https://i.imgur.com/s6KpyCT.png"></p></li></ul><h1 id="五、Anaconda-環境設定"><a href="#五、Anaconda-環境設定" class="headerlink" title="五、Anaconda 環境設定"></a>五、Anaconda 環境設定</h1><ul><li><p>先安裝 anaconda 環境</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把 liu 改成你自己的環境名稱</span></span><br><span class="line">conda create --name liu python=3.7 -y</span><br><span class="line">conda activate liu</span><br><span class="line">pip install opencv-python --upgrade</span><br><span class="line">conda install -y cudnn</span><br><span class="line">conda install -c anaconda libtiff -y</span><br><span class="line">conda install -c conda-forge ffmpeg -y</span><br></pre></td></tr></table></figure></li></ul><h1 id="六、找到-ffmpeg-位置"><a href="#六、找到-ffmpeg-位置" class="headerlink" title="六、找到 ffmpeg 位置"></a>六、找到 ffmpeg 位置</h1><ul><li><p>用 <code>which ffmpeg</code> 找到 anaconda 環境下的位置，先把它存起來，等等要把它加到環境變數中</p><p><img src="https://i.imgur.com/jEQoGcU.png"></p></li><li><p>用 <code>find ~/ -name &#39;pkgconfig&#39;</code> 找到環境下 ffmpeg 相關檔案的位置</p><p><img src="https://i.imgur.com/Iv1iQH4.png"></p></li><li><p>用 <code>find ~/ -name &#39;pkgconfig&#39; | grep ffmpeg</code> 找到 ffmpeg 相關檔案的位置</p><p><img src="https://i.imgur.com/wTIQfA9.png"></p></li><li><p>用 <code>find ~/ -name &#39;share&#39; | grep ffmpeg</code> 找 ffmpeg 執行檔的位置</p><p><img src="https://i.imgur.com/nzvMzNv.png"></p></li></ul><h1 id="七、新增環境變數"><a href="#七、新增環境變數" class="headerlink" title="七、新增環境變數"></a>七、新增環境變數</h1><ul><li><p><code>vim ~/.bashrc</code> 然後在最下面把剛存的路徑加入到環境變數中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把 liu 改成你自己的環境名稱</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;~/anaconda3/envs/liu/bin/ffmpeg:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=<span class="string">&quot;~/anaconda3/envs/liu/bin/ffmpeg&quot;</span></span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=<span class="string">&quot;~/anaconda3/pkgs/ffmpeg-4.3.2-hca11adc_0/lib/pkgconfig&quot;</span></span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=<span class="string">&quot;~/anaconda3/envs/liu/lib/pkgconfig&quot;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;~/anaconda3/pkgs/ffmpeg-4.3.2-hca11adc_0/share&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>存檔退出，並用 <code>source ~/.bashrc</code> 使其生效</p></li></ul><h1 id="八、編譯-Opencv-Cuda"><a href="#八、編譯-Opencv-Cuda" class="headerlink" title="八、編譯 Opencv Cuda"></a>八、編譯 Opencv Cuda</h1><ul><li><p>首先執行以下指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y git cmake</span><br><span class="line"></span><br><span class="line">conda activate liu</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> opencv_cuda</span><br><span class="line"><span class="built_in">cd</span> opencv_cuda</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv_contrib.git</span><br><span class="line"><span class="built_in">cd</span> opencv</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules -D BUILD_EXAMPLES=ON -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D WITH_FFMPEG=ON -D WITH_LIBV4L=ON -D WITH_GTK=ON -D WITH_OPENGL=ON -D WITH_ZLIB=ON -D BUILD_PNG=ON -D BUILD_JPEG=ON -D BUILD_TIFF=ON -D WITH_CUDA=ON -D WITH_OPENCL=ON -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D WITH_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=$(python -c <span class="string">&quot;import sys; print(sys.prefix)&quot;</span>) -DPYTHON3_EXECUTABLE=$(<span class="built_in">which</span> python) -DPYTHON3_INCLUDE_DIR=$(python -c <span class="string">&quot;from distutils.sysconfig import get_python_inc; print(get_python_inc())&quot;</span>) -DPYTHON3_PACKAGES_PATH=$(python -c <span class="string">&quot;from distutils.sysconfig import get_python_lib; print(get_python_lib())&quot;</span>) ..</span><br></pre></td></tr></table></figure></li><li><p>cmake 完之後會出現許多跟環境相關的資訊，這裡我只列重要的</p><ul><li><p>查看是否有找到 ffmpeg</p><p><img src="https://i.imgur.com/iGRQXUo.png"></p></li><li><p>查看是否有找到 cuda 和 cudnn</p><p><img src="https://i.imgur.com/R1QMxiO.png"></p></li><li><p>以上確認都有的話，就執行 <code>make -j$(nproc) &amp;&amp; make install</code>，編譯的過程大約需一小時</p></li></ul></li></ul><h1 id="九、測試是否成功"><a href="#九、測試是否成功" class="headerlink" title="九、測試是否成功"></a>九、測試是否成功</h1><ul><li><p>在 terminal 上用 python 指令測試</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">&gt;&gt;&gt; import cv2</span><br><span class="line">&gt;&gt;&gt; cv2.cuda.getCudaEnabledDeviceCount()</span><br></pre></td></tr></table></figure><ul><li><font color="#f00">output 不等於 0 就代表成功了</font></li></ul><p>  <img src="https://i.imgur.com/ujGfKrn.png"></p></li><li><p>若想查看 opencv 相關建置資訊，可用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(cv2.getBuildInformation())</span><br></pre></td></tr></table></figure><ul><li><font color="#f00">確認 ffmpeg、cuda、cudnn 都有即可</font></li></ul><p><img src="https://i.imgur.com/p1Xz4Hf.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
